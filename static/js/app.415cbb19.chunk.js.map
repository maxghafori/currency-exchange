{"version":3,"sources":["src/icons/DropDown.tsx","src/icons/Change.tsx","src/utils/number.ts","src/redux/exchangeStates.ts","src/redux/store.ts","src/components/wallet-selector/WalletSelector.styles.ts","src/components/wallet-selector/WalletItem.styles.ts","src/components/wallet-selector/WalletItem.tsx","src/components/wallet-selector/WalletsModal.tsx","src/components/wallet-selector/WalletSelector.tsx","src/components/exchange-row/ExchangeRow.styles.ts","src/components/exchange-row/ExchangeRow.tsx","src/api/config.ts","src/api/convert.ts","src/api/utils.ts","src/components/exchange-rate/ExchangeRate.styles.ts","src/components/exchange-rate/ExchangeRate.tsx","src/pages/home/HomePage.styles.ts","src/pages/home/HomePage.tsx","src/theme/theme.ts","App.tsx","index.js"],"names":["DropDownIcon","width","height","fill","fillRule","clipRule","d","ChangeIcon","truncate","num","re","RegExp","toString","match","exchangeSlice","createSlice","name","initialState","wallets","USD","balance","EUR","GBP","currencies","symbol","code","fromWallet","toWallet","fromAmount","toAmount","exchangeRate","error","reducers","exchangeCurrency","state","Number","selectWallet","action","payload","type","wallet","changeAmount","amount","setExchangeRate","switchWallet","temp","actions","store","configureStore","reducer","exchangeState","exchangeStates","SelectorWrapper","styled","Pressable","Row","View","CenteredView","ModalContainer","props","theme","size","maxWidth","colors","card","Title","Text","primaryTextColor","SubTitle","secondaryTextColor","ModalTitle","ItemWrapper","secondaryColor","WalletTitle","WalletSubTitle","WalletBalance","WalletItem","item","onClick","useSelector","onPress","WalletsModals","open","onClose","onWalletClick","renderItem","useCallback","keyExtractor","Modal","animationType","transparent","visible","onRequestClose","FlatList","data","Object","values","WalletSelector","useState","modalToggle","setModalToggle","selectedWallet","root","dispatch","useDispatch","keys","Container","InputWrapper","AmountInput","TextInput","Type","Error","ExchangeRow","value","onChangeText","text","length","baseUrl","process","BASE_URL","apiKey","API_KEY","useExchangeRate","from","to","useQuery","fetch","getExchangeRate","then","res","json","cacheTime","refetchOnWindowFocus","refetchIntervalInBackground","BackLine","RateWrapper","RateText","FloatButton","ExchangeRate","rate","useEffect","background","Card","ExchangeButton","primaryColor","ButtonText","HomePage","maxWidthPercent","queryClient","QueryClient","registerRootComponent","client","SafeAreaView","style","flex","backgroundColor"],"mappings":"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","file":"static/js/app.415cbb19.chunk.js","sourcesContent":["import * as React from 'react';\nimport Svg, { Path } from 'react-native-svg';\n\nexport const DropDownIcon = () => (\n  <Svg width={24} height={24} fill=\"none\">\n    <Path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M18.53 9.47a.75.75 0 010 1.06l-6 6a.75.75 0 01-1.06 0l-6-6a.75.75 0 111.06-1.06L12 14.94l5.47-5.47a.75.75 0 011.06 0z\"\n      fill=\"#000\"\n    />\n  </Svg>\n);\n","import * as React from 'react';\nimport Svg, { Path } from 'react-native-svg';\n\nexport const ChangeIcon = () => (\n  <Svg width={24} height={24} fill=\"none\">\n    <Path\n      d=\"M12.984 15a1 1 0 001.848.53l2.688-2.687a1 1 0 00-1.415-1.414l-1.12 1.12V5a1 1 0 00-2 0v9.95.05zM11.016 9a1 1 0 00-1.848-.53l-2.687 2.687a1 1 0 101.414 1.414l1.121-1.12V19a1 1 0 102 0V9.05 9z\"\n      fill=\"currentColor\"\n    />\n  </Svg>\n);\n","export function truncate(num:string|number):string {\n  const re = new RegExp('^-?\\\\d+(?:.\\\\d{0,2})?');\n  return num.toString().match(re)?.[0] || '0';\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { CurrencyType, WalletType } from 'src/types';\nimport { truncate } from 'src/utils/number';\n\ninterface ExchangeStatesType {\n  currencies: CurrencyType;\n  wallets: WalletType;\n  fromWallet: string,\n  toWallet: string,\n  fromAmount: string,\n  toAmount: string,\n  exchangeRate: number,\n  error:string\n}\n\nconst initialState: ExchangeStatesType = {\n  wallets: {\n    USD: { balance: 200 },\n    EUR: { balance: 150 },\n    GBP: { balance: 10 },\n  },\n  currencies: {\n    USD: { symbol: '$', name: 'Dollar', code: 'USD' },\n    EUR: { symbol: '€', name: 'Euro', code: 'EUR' },\n    GBP: { symbol: '£', name: 'British Pound', code: 'GBP' },\n  },\n  fromWallet: 'USD',\n  toWallet: 'EUR',\n  fromAmount: '',\n  toAmount: '',\n  exchangeRate: 1.2,\n  error: '',\n};\n\nconst exchangeSlice = createSlice({\n  name: 'exchangeSlice',\n  initialState,\n  reducers: {\n    exchangeCurrency(state) {\n      if (Number(state.fromAmount) <= state.wallets[state.fromWallet].balance && state.fromWallet !== state.toWallet) {\n        state.wallets[state.fromWallet].balance = Number(truncate(state.wallets[state.fromWallet].balance -= Number(state.fromAmount)));\n        state.wallets[state.toWallet].balance = Number(truncate(state.wallets[state.toWallet].balance += Number(state.toAmount)));\n        state.fromAmount = '';\n        state.toAmount = '';\n      }\n    },\n    selectWallet(state, action: PayloadAction<{ type: 'FROM' | 'TO', wallet: string }>) {\n      if (action.payload.type === 'FROM') {\n        state.fromWallet = action.payload.wallet;\n      } else {\n        state.toWallet = action.payload.wallet;\n      }\n    },\n    changeAmount(state, action: PayloadAction<{ type: 'FROM' | 'TO', amount: string }>) {\n      if (action.payload.type === 'FROM') {\n        state.fromAmount = action.payload.amount;\n        state.toAmount = Number(action.payload.amount) > 0 ? truncate(state.exchangeRate * Number(action.payload.amount)) : '';\n      } else {\n        state.toAmount = action.payload.amount;\n        state.fromAmount = Number(action.payload.amount) > 0 ? truncate(state.exchangeRate * Number(action.payload.amount)) : '';\n      }\n      if (Number(state.fromAmount) > state.wallets[state.fromWallet].balance) {\n        state.error = 'Exceeds balance';\n      } else {\n        state.error = '';\n      }\n    },\n    setExchangeRate(state, action: PayloadAction<number>) {\n      state.exchangeRate = action.payload;\n    },\n    switchWallet(state) {\n      const temp = state.toWallet;\n      state.toWallet = state.fromWallet;\n      state.fromWallet = temp;\n    },\n  },\n});\n\nexport default exchangeSlice.reducer;\nexport const {\n  exchangeCurrency,switchWallet, selectWallet, changeAmount, setExchangeRate,\n} = exchangeSlice.actions;\n","import { configureStore } from '@reduxjs/toolkit';\nimport exchangeStates from './exchangeStates';\n\nconst store = configureStore({\n  reducer: {\n    exchangeState: exchangeStates,\n  },\n});\n\nexport default store;\n","import styled from 'styled-components/native';\n\nexport const SelectorWrapper = styled.Pressable`\n  padding: 10px;\n  margin: 5px;\n`;\n\nexport const Row = styled.View`\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const CenteredView = styled.Pressable`\n  flex:1;\n  justify-content: flex-end;\n  align-items: center;\n  margin-top: 22px;\n`;\n\nexport const ModalContainer = styled.Pressable`\n  width: 100%;\n  max-width:${(props) => props.theme.size.maxWidth};\n  align-self: center;\n  height: 45%;\n  border-top-right-radius: 50px;\n  border-top-left-radius: 50px;\n  padding: 30px;\n  background-color: ${(props) => props.theme.colors.card};\n`;\n\nexport const Title = styled.Text`\n  font-size: 18px;\n  color:  ${(props) => props.theme.colors.primaryTextColor};\n`;\n\nexport const SubTitle = styled.Text`\n  font-size: 12px;\n  color:  ${(props) => props.theme.colors.secondaryTextColor};\n`;\n\nexport const ModalTitle = styled.Text`\n  font-size: 18px;\n  align-self: center;\n  margin: 10px;\n  color:  ${(props) => props.theme.colors.primaryTextColor};\n`;\n","import styled from 'styled-components/native';\n\nexport const ItemWrapper = styled.Pressable`\n  margin: 5px;\n  border-radius: 10px;\n  flex-direction: row;\n  justify-content: space-between;\n  background-color: ${(props) => props.theme.colors.secondaryColor};\n  align-items: center;\n  padding: 20px;\n`;\n\nexport const WalletTitle = styled.Text`\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 5px;\n  color: ${(props) => props.theme.colors.primaryTextColor};\n`;\n\nexport const WalletSubTitle = styled.Text`\n  font-size: 14px;\n  color: ${(props) => props.theme.colors.secondaryTextColor};\n`;\n\nexport const WalletBalance = styled.Text`\n  font-size: 18px;\n  font-weight: bold;\n  color: ${(props) => props.theme.colors.primaryTextColor};\n`;\n","import React from 'react';\nimport { View } from 'react-native';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'src/redux';\nimport { WalletType } from 'src/types';\nimport {\n  ItemWrapper, WalletBalance, WalletTitle, WalletSubTitle,\n} from './WalletItem.styles';\n\ninterface WalletItemProps {\n    item: {\n        code: string,\n        name: string,\n        symbol: string\n    }\n    onClick: (item: WalletType) => void,\n}\n\nexport const WalletItem = ({ item, onClick }: WalletItemProps) => {\n  const wallets = useSelector((state: RootState) => state.exchangeState.wallets);\n  return (\n    <ItemWrapper onPress={() => onClick({ [item.code]: wallets[item.code] })}>\n      <View>\n        <WalletTitle>{item.code}</WalletTitle>\n        <WalletSubTitle>{item.name}</WalletSubTitle>\n      </View>\n      <WalletBalance>{`${wallets[item.code].balance} ${item.symbol}`}</WalletBalance>\n    </ItemWrapper>\n  );\n};\n","import { FlatList, Modal } from 'react-native';\nimport React, { useCallback } from 'react';\nimport { WalletType } from 'src/types';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'src/redux';\nimport { CenteredView, ModalContainer, ModalTitle } from './WalletSelector.styles';\nimport { WalletItem } from './WalletItem';\n\ninterface WalletsModalProps{\n    open:boolean,\n    onClose:()=>void,\n    onWalletClick:(item:WalletType)=>void\n}\n\nexport const WalletsModals = ({ open, onClose, onWalletClick }:WalletsModalProps) => {\n  const currencies = useSelector((state:RootState) => state.exchangeState.currencies);\n\n  const renderItem = useCallback(({ item }) => (\n    <WalletItem\n      item={item}\n      onClick={(wallet) => {\n        onWalletClick(wallet);\n        onClose();\n      }}\n    />\n  ), [onClose, onWalletClick]);\n\n  const keyExtractor = useCallback((item) => item.code, []);\n\n  return (\n    <Modal animationType=\"slide\" transparent visible={open} onRequestClose={onClose}>\n      <CenteredView onPress={onClose}>\n        <ModalContainer>\n          <ModalTitle>Wallets</ModalTitle>\n          <FlatList data={Object.values(currencies)} renderItem={renderItem} keyExtractor={keyExtractor} />\n        </ModalContainer>\n      </CenteredView>\n    </Modal>\n  );\n};\n","import React, { useState } from 'react';\nimport { DropDownIcon } from 'src/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState, selectWallet } from 'src/redux';\nimport {\n  SelectorWrapper, Row, Title, SubTitle,\n} from './WalletSelector.styles';\nimport { WalletsModals } from './WalletsModal';\n\ninterface WalletSelectorProps{\n    type:'FROM'|'TO'\n}\n\nexport const WalletSelector = ({ type }:WalletSelectorProps) => {\n  const [modalToggle, setModalToggle] = useState(false);\n  const selectedWallet = useSelector((root:RootState) => (type === 'FROM' ? root.exchangeState.fromWallet : root.exchangeState.toWallet));\n  const wallets = useSelector((root:RootState) => root.exchangeState.wallets);\n  const dispatch = useDispatch();\n\n  return (\n    <SelectorWrapper onPress={() => setModalToggle(true)}>\n      <Row>\n        <Title>{selectedWallet}</Title>\n        <DropDownIcon />\n      </Row>\n      <SubTitle>{`Balance: ${wallets[selectedWallet].balance}`}</SubTitle>\n      <WalletsModals open={modalToggle} onClose={() => setModalToggle(false)} onWalletClick={(wallet) => dispatch(selectWallet({ type, wallet: Object.keys(wallet)[0] }))} />\n    </SelectorWrapper>\n  );\n};\n","import styled from 'styled-components/native';\n\nexport const Container = styled.View`\n  flex-direction: row;\n  align-items: center;\n  width: 90%;\n  align-self: center;\n  justify-content: space-between;\n`;\n\nexport const InputWrapper = styled.View`\n  flex-direction: row;\n  border-radius: 10px;\n  padding: 5px;\n  align-items: center;\n  background-color: #f8f8f8;\n`;\n\nexport const AmountInput = styled.TextInput`\n  padding: 10px;\n  min-width: 100px;\n`;\n\nexport const Type = styled.Text`\n  font-size: 18px;\n  margin-left: 5px;\n`;\n\nexport const Error = styled.Text`\n  font-size: 12px;\n  color: darkred;\n  position: absolute;\n  bottom: -20px;\n`;\n","import React from 'react';\nimport { WalletSelector } from 'src/components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeAmount, RootState } from 'src/redux';\nimport { View } from 'react-native';\nimport {\n  AmountInput, InputWrapper, Container, Type, Error,\n} from './ExchangeRow.styles';\n\ninterface ExchangeRowProps{\n    type:'FROM'|'TO'\n}\n\nexport const ExchangeRow = ({ type }:ExchangeRowProps) => {\n  const value = useSelector((root: RootState) => (type === 'FROM' ? root.exchangeState.fromAmount : root.exchangeState.toAmount));\n  const error = useSelector((root: RootState) => root.exchangeState.error);\n  const dispatch = useDispatch();\n  return (\n    <>\n      <Container>\n        <WalletSelector type={type} />\n        <View>\n          <InputWrapper>\n            <Type>{type === 'FROM' ? '-' : '+'}</Type>\n            <AmountInput\n              value={value.toString()}\n              onChangeText={(text) => dispatch(changeAmount({ type, amount: text }))}\n            />\n          </InputWrapper>\n          {type === 'FROM' && error.length > 0 && <Error>{error}</Error>}\n        </View>\n      </Container>\n\n    </>\n  );\n};\n","export const baseUrl = process.env.BASE_URL || 'https://free.currconv.com/api/v7';\nexport const apiKey = process.env.API_KEY || 'ad76c50a78d83a6a079b';\n","import { useQuery } from 'react-query';\nimport { getExchangeRate } from './utils';\n\nexport const useExchangeRate = (from:string, to:string) => useQuery(['convert', from, to], () => getExchangeRate(from, to).then((res) => res.json()), {\n  cacheTime: 600000,\n  refetchOnWindowFocus: false,\n  refetchIntervalInBackground: false,\n});\n","import { apiKey, baseUrl } from './config';\n\nexport const getExchangeRate = (from:string, to:string) => fetch(`${baseUrl}/convert?q=${from}_${to}&compact=ultra&apiKey=${apiKey}`);\n","import styled from 'styled-components/native';\n\nexport const Container = styled.View`\n  width: 100%;\n  height: 50px;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const BackLine = styled.View`\n  position: absolute;\n  height: 1px;\n  width: 100%;\n  background-color: lightgrey;\n`;\n\nexport const RateWrapper = styled.View`\n  background-color: ${(props) => props.theme.colors.card};\n  border-radius: 20px;\n  justify-content: center;\n  align-items: center;\n  min-width: 30%;\n  padding: 5px;\n  border-width: 1px;\n  border-color: lightgrey;\n`;\n\nexport const RateText = styled.Text`\n  font-size: 14px;\n  text-align: center;\n`;\n\nexport const FloatButton = styled.Pressable`\n  position: absolute;\n  background-color: ${(props) => props.theme.colors.card};\n  width: 40px;\n  height: 40px;\n  border-width: 1px;\n  border-color: lightgrey;\n  right: 10px;\n  align-items: center;\n  justify-content: center;\n  border-radius: 20px;\n  padding: 10px;\n`;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState, setExchangeRate, switchWallet } from 'src/redux';\nimport { useExchangeRate } from 'src/api';\nimport { truncate } from 'src/utils/number';\nimport { ChangeIcon } from 'src/icons';\nimport {\n  BackLine, Container, RateText, RateWrapper, FloatButton,\n} from './ExchangeRate.styles';\n\nexport const ExchangeRate = () => {\n  const fromWallet = useSelector((root:RootState) => root.exchangeState.fromWallet);\n  const toWallet = useSelector((root:RootState) => root.exchangeState.toWallet);\n  const exchangeRate = useSelector((root:RootState) => root.exchangeState.exchangeRate);\n  const dispatch = useDispatch();\n\n  const { data: rate } = useExchangeRate(fromWallet, toWallet);\n\n  useEffect(() => {\n    if (rate) {\n      dispatch(setExchangeRate(rate[`${fromWallet}_${toWallet}`]));\n    }\n  }, [dispatch, fromWallet, rate, toWallet]);\n\n  return (\n    <Container>\n      <BackLine />\n      <RateWrapper>\n        <RateText>{`1 ${fromWallet} = ${truncate(exchangeRate)} ${toWallet}`}</RateText>\n      </RateWrapper>\n      <FloatButton onPress={() => dispatch(switchWallet())}>\n        <ChangeIcon />\n      </FloatButton>\n\n    </Container>\n  );\n};\n","import styled from 'styled-components/native';\n\nexport const Container = styled.View`\n  flex: 1;\n  width: 100%;\n  max-width:${(props) => props.theme.size.maxWidth};\n  align-self: center;\n  background-color: ${(props) => props.theme.colors.background};\n`;\n\nexport const Card = styled.View`\n  box-shadow: 1px 1px 5px #0000001A;\n  border-bottom-left-radius: 50px;\n  border-bottom-right-radius: 50px;\n  align-items: center;\n  width:100%;\n  min-height: 400px;\n  align-self: center;\n  padding: 10px;\n  justify-content: space-evenly;\n  background-color: ${(props) => props.theme.colors.card};\n`;\n\nexport const Title = styled.Text`\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nexport const ExchangeButton = styled.Pressable`\n  background-color: ${(props) => props.theme.colors.primaryColor};\n  align-items: center;\n  justify-content: center;\n  align-self: center;\n  width: 40%;\n  height: 50px;\n  border-radius: 25px;\n`;\n\nexport const ButtonText = styled.Text`\n  font-size: 16px;\n  color: white;\n  font-weight: bold;\n`;\n","import React from 'react';\nimport { ExchangeRow, ExchangeRate } from 'src/components';\nimport { useDispatch } from 'react-redux';\nimport { exchangeCurrency } from 'src/redux';\nimport {\n  Container, Card, Title, ExchangeButton, ButtonText,\n} from './HomePage.styles';\n\nexport function HomePage() {\n  const dispatch = useDispatch();\n  return (\n    <Container>\n      <Card>\n        <Title>Exchange your money!</Title>\n        <ExchangeRow type=\"FROM\" />\n        <ExchangeRate />\n        <ExchangeRow type=\"TO\" />\n        <ExchangeButton onPress={() => dispatch(exchangeCurrency())}>\n          <ButtonText>Exchange</ButtonText>\n        </ExchangeButton>\n      </Card>\n    </Container>\n  );\n}\n","import { DefaultTheme } from 'styled-components/native';\n\nexport const theme: DefaultTheme = {\n  size: {\n    maxWidth: '500px',\n    maxWidthPercent: '90%',\n  },\n  colors: {\n    background: '#039BE5',\n    card: '#ffffff',\n    primaryColor: '#1a9cfc',\n    secondaryColor: '#e8f5fb',\n    primaryTextColor: '#000000',\n    secondaryTextColor: '#637696',\n  },\n\n};\n","import React from 'react';\nimport { SafeAreaView } from 'react-native';\nimport { ThemeProvider } from 'styled-components/native';\nimport { Provider } from 'react-redux';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { HomePage } from './src/pages';\nimport { theme } from './src/theme';\nimport { store } from './src/redux';\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <QueryClientProvider client={queryClient}>\n          <SafeAreaView style={{ flex: 1, backgroundColor: theme.colors.secondaryColor }}>\n            <HomePage />\n          </SafeAreaView>\n        </QueryClientProvider>\n      </ThemeProvider>\n    </Provider>\n  );\n}\n","import 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}